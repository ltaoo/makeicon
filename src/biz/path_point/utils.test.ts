import { describe, it, expect } from "vitest";

import { getSymmetricPoint2, isCollinear } from "./utils";

describe("1", () => {
  it("1", () => {
    const a1 = {
      x: 240,
      y: 160,
    };
    const a2 = {
      x: 320,
      y: 160,
    };
    const a3 = {
      x: 280,
      y: 280,
    };
    const r = getSymmetricPoint2(a1, a2, a3, 2 / 6);
    expect(r).toStrictEqual({
      x: 280,
      y: 120,
    });
  });
});

function joinOutline(
  paths: {
    lines: { curves: { index: number; _3d?: number }[] };
  }[]
) {
  const forward_path: { index: number }[] = [];
  // const curve: { x: number; y: number }[][] = [];
  const back_path: { index: number }[] = [];
  // let start_cap: { index: number } | null = null;
  // let end_cap: { index: number } | null = null;

  for (let i = 0; i < paths.length; i += 1) {
    const cur = paths[i];
    const { lines } = cur;
    // const next = paths[i + 1];
    (() => {
      let k = 0;
      k += 1;
      let is_forward = true;
      while (k < lines.curves.length) {
        const curve = lines.curves[k];
        if (curve._3d === undefined) {
          is_forward = false;
          // end_cap = curve;
          break;
        }
        if (is_forward) {
          forward_path.push(curve);
        }
        k += 1;
      }
      let j = lines.curves.length - 1;
      while (j > k) {
        const curve = lines.curves[j];
        if (!is_forward) {
          back_path.unshift(curve);
        }
        j -= 1;
      }
    })();
  }

  return [...forward_path, ...back_path];
}

describe("2", () => {
  it("2", () => {
    const paths = [
      {
        lines: {
          curves: [
            {
              index: 0,
            },
            {
              index: 1,
              _3d: 0,
            },
            {
              index: 2,
              _3d: 0,
            },
            {
              index: 3,
              _3d: 0,
            },
            {
              index: 4,
            },
            {
              index: 5,
              _3d: 0,
            },
            {
              index: 6,
              _3d: 0,
            },
            {
              index: 7,
              _3d: 0,
            },
          ],
        },
      },
      {
        lines: {
          curves: [
            {
              index: 8,
            },
            {
              index: 9,
              _3d: 0,
            },
            {
              index: 10,
              _3d: 0,
            },
            {
              index: 11,
              _3d: 0,
            },
            {
              index: 12,
            },
            // 4
            {
              index: 13,
              _3d: 0,
            },
            {
              index: 14,
              _3d: 0,
            },
            {
              index: 15,
              _3d: 0,
            },
          ],
        },
      },
    ];
    const r = joinOutline(paths);
    expect(r).toStrictEqual([
      // {
      //   index: 0,
      // },
      {
        index: 1,
        _3d: 0,
      },
      {
        index: 2,
        _3d: 0,
      },
      {
        index: 3,
        _3d: 0,
      },
      {
        index: 9,
        _3d: 0,
      },
      {
        index: 10,
        _3d: 0,
      },
      {
        index: 11,
        _3d: 0,
      },
      {
        index: 13,
        _3d: 0,
      },
      {
        index: 14,
        _3d: 0,
      },
      {
        index: 15,
        _3d: 0,
      },
      {
        index: 5,
        _3d: 0,
      },
      {
        index: 6,
        _3d: 0,
      },
      {
        index: 7,
        _3d: 0,
      },
    ]);
  });
});

describe("is collinear", () => {
  it("horizontal line1", () => {
    const a1 = {
      x: 100,
      y: 100,
    };
    const a2 = {
      x: 200,
      y: 100,
    };
    const a3 = {
      x: 300,
      y: 100,
    };
    const r = isCollinear(a1, a2, a3);

    expect(r).toStrictEqual({
      collinear: true,
      midpoint: true,
    });
  });

  it("horizontal line2", () => {
    const a1 = {
      x: 100,
      y: 100,
    };
    const a2 = {
      x: 200,
      y: 100,
    };
    const a3 = {
      x: 400,
      y: 100,
    };
    const r = isCollinear(a1, a2, a3);

    expect(r).toStrictEqual({
      collinear: true,
      midpoint: false,
    });
  });

  it("vertical line1", () => {
    const a1 = {
      x: 100,
      y: 100,
    };
    const a2 = {
      x: 100,
      y: 200,
    };
    const a3 = {
      x: 100,
      y: 300,
    };
    const r = isCollinear(a1, a2, a3);

    expect(r).toStrictEqual({
      collinear: true,
      midpoint: true,
    });
  });

  it("vertical line2", () => {
    const a1 = {
      x: 100,
      y: 100,
    };
    const a2 = {
      x: 100,
      y: 200,
    };
    const a3 = {
      x: 100,
      y: 400,
    };
    const r = isCollinear(a1, a2, a3);

    expect(r).toStrictEqual({
      collinear: true,
      midpoint: false,
    });
  });

  it("random line2", () => {
    const a1 = {
      x: 37.5,
      y: 303,
    };
    const a2 = {
      x: 171.5,
      y: 288,
    };
    const a3 = {
      x: 305.5,
      y: 273,
    };
    const r = isCollinear(a1, a2, a3);

    expect(r).toStrictEqual({
      collinear: true,
      midpoint: true,
    });
  });

  it("random line3", () => {
    const a1 = {
      x: 37.5,
      y: 303,
    };
    const a2 = {
      x: 171.5,
      y: 288,
    };
    const a3 = {
      x: 284.5,
      y: 38,
    };
    const r = isCollinear(a1, a2, a3);

    expect(r).toStrictEqual({
      collinear: false,
      midpoint: false,
    });
  });
});

// const svg = `<svg t="1725376930087" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1891" data-spm-anchor-id="a313x.collections_detail.0.i4.361a3a81f5lUb4" width="200" height="200"><path d="M913.317653 450.150478a35.215398 35.215398 0 0 0-44.06724 23.803988 459.058629 459.058629 0 0 1-44.707131 102.596041c-65.268999 109.890812-179.212462 172.920189-312.629976 172.920189-133.460173 0-247.424965-63.050707-312.693965-172.984178a460.125116 460.125116 0 0 1-44.643142-102.468063 35.279387 35.279387 0 0 0-44.06724-23.825318 35.791301 35.791301 0 0 0-23.548031 44.557824 531.899686 531.899686 0 0 0 51.703286 118.486696c71.305315 120.150416 195.892317 195.423063 337.927045 206.173251v168.718231c0 19.730008 15.784006 35.705982 35.322047 35.705982 19.516711 0 35.322047-15.997304 35.322047-35.705982v-168.718231c141.970739-10.750188 266.536411-86.001505 337.863056-206.109262a531.259794 531.259794 0 0 0 51.767275-118.593345 35.791301 35.791301 0 0 0-23.548031-44.557823z m16.103952-270.674381a69.833563 69.833563 0 0 0-63.136025-42.659476l-10.878167-0.085319c-62.922728 0-120.427703 19.111446-171.149821 40.398524C639.955726 100.21479 598.640022 48.916769 555.575281 17.071469a69.705585 69.705585 0 0 0-73.182333-11.432739 69.812234 69.812234 0 0 0-17.063791 10.344923c-42.872774 31.290726-85.57491 83.697893-130.111404 159.653092-50.124885-20.519208-106.712681-38.969432-167.331797-38.969432l-10.686199 0.106648a69.748245 69.748245 0 0 0-62.79475 42.616818C69.961127 237.386337 59.957479 306.49469 65.460552 379.229097a35.471355 35.471355 0 0 0 37.902945 32.890457 35.599333 35.599333 0 0 0 32.527851-38.32954c-4.607223-61.024382 3.412758-118.25207 23.164096-165.582759l9.171787-0.085319c58.870078 0 115.329895 22.460215 168.099669 45.475002 16.637196 7.252111 36.004598 0.639892 44.83511-15.400071 45.432343-82.37545 86.748046-136.297028 126.293381-164.836218 0.85319-0.597233 1.173136-1.535741 1.919676-2.218293 1.087817 1.002498 2.218293 1.941006 3.412758 2.794196 39.289378 28.624509 80.306465 82.866034 125.376203 165.860046a35.172739 35.172739 0 0 0 45.261704 15.46406c50.892756-22.80149 110.338737-47.117392 171.661735-47.117392l9.662371 0.106649c18.663521 44.664472 26.87547 98.543391 23.825318 155.984376-1.066487 19.687349 13.86433 36.516512 33.359711 37.582999 19.324743 1.386433 36.132577-14.013638 37.177734-33.722316 3.668715-68.596439-6.612219-133.844108-29.690996-188.640206z m-555.362398 126.485349c-19.516711 0-35.322047 15.975974-35.322047 35.705982v34.831463c0 19.730008 15.805336 35.727312 35.322047 35.727312 19.516711 0 35.322047-15.997304 35.322047-35.727312v-34.831463c0-19.730008-15.805336-35.705982-35.322047-35.705982z m275.708198 0c-19.516711 0-35.322047 15.975974-35.322047 35.705982v34.831463c0 19.730008 15.805336 35.727312 35.322047 35.727312 19.516711 0 35.322047-15.997304 35.322047-35.727312v-34.831463c0-19.730008-15.805336-35.705982-35.322047-35.705982z m-50.743447 161.722077a35.279387 35.279387 0 0 0-48.802442 10.024977c-0.149308 0.213297-15.400071 22.588193-38.649486 22.588192-22.609523 0-36.68715-20.711176-37.625658-22.161598a35.08742 35.08742 0 0 0-48.439836-11.155453 35.919279 35.919279 0 0 0-11.368751 49.186377c12.691194 20.625857 47.458668 55.563968 97.434245 55.563968 49.69829 0 84.935018-34.682155 97.903499-55.158703a35.769971 35.769971 0 0 0-10.451571-48.88776z m300.429365 323.294844a35.08742 35.08742 0 0 0-49.399674-7.508068L614.552007 959.419311a35.983269 35.983269 0 0 0-7.422749 49.954247 35.172739 35.172739 0 0 0 49.421004 7.486739l235.480312-175.906353c15.698687-11.731356 19.004797-34.084922 7.422749-49.954247z m-490.157388 168.419614L173.772963 783.44897a35.08742 35.08742 0 0 0-49.421003 7.508067 35.983269 35.983269 0 0 0 7.422749 49.954248l235.480311 175.906352a35.172739 35.172739 0 0 0 49.399674-7.508068 35.983269 35.983269 0 0 0-7.401419-49.932917z" fill="#111111" p-id="1892" data-spm-anchor-id="a313x.collections_detail.0.i2.361a3a81f5lUb4" class=""></path></svg>`;
const svg = `<svg t="1725376930087" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1891" data-spm-anchor-id="a313x.collections_detail.0.i4.361a3a81f5lUb4" width="200" height="200"><path d="M913.317653 450.150478a35.215398 35.215398 0 0 0-44.06724 23.803988 459.058629 459.058629 0 0 1-44.707131 102.596041c-65.268999 109.890812-179.212462 172.920189-312.629976 172.920189-133.460173 0-247.424965-63.050707-312.693965-172.984178a460.125116 460.125116 0 0 1-44.643142-102.468063 35.279387 35.279387 0 0 0-44.06724-23.825318 35.791301 35.791301 0 0 0-23.548031 44.557824 531.899686 531.899686 0 0 0 51.703286 118.486696c71.305315 120.150416 195.892317 195.423063 337.927045 206.173251v168.718231c0 19.730008 15.784006 35.705982 35.322047 35.705982 19.516711 0 35.322047-15.997304 35.322047-35.705982v-168.718231c141.970739-10.750188 266.536411-86.001505 337.863056-206.109262a531.259794 531.259794 0 0 0 51.767275-118.593345 35.791301 35.791301 0 0 0-23.548031-44.557823z m16.103952-270.674381a69.833563 69.833563 0 0 0-63.136025-42.659476l-10.878167-0.085319c-62.922728 0-120.427703 19.111446-171.149821 40.398524C639.955726 100.21479 598.640022 48.916769 555.575281 17.071469a69.705585 69.705585 0 0 0-73.182333-11.432739 69.812234 69.812234 0 0 0-17.063791 10.344923c-42.872774 31.290726-85.57491 83.697893-130.111404 159.653092-50.124885-20.519208-106.712681-38.969432-167.331797-38.969432l-10.686199 0.106648a69.748245 69.748245 0 0 0-62.79475 42.616818C69.961127 237.386337 59.957479 306.49469 65.460552 379.229097a35.471355 35.471355 0 0 0 37.902945 32.890457 35.599333 35.599333 0 0 0 32.527851-38.32954c-4.607223-61.024382 3.412758-118.25207 23.164096-165.582759l9.171787-0.085319c58.870078 0 115.329895 22.460215 168.099669 45.475002 16.637196 7.252111 36.004598 0.639892 44.83511-15.400071 45.432343-82.37545 86.748046-136.297028 126.293381-164.836218 0.85319-0.597233 1.173136-1.535741 1.919676-2.218293 1.087817 1.002498 2.218293 1.941006 3.412758 2.794196 39.289378 28.624509 80.306465 82.866034 125.376203 165.860046a35.172739 35.172739 0 0 0 45.261704 15.46406c50.892756-22.80149 110.338737-47.117392 171.661735-47.117392l9.662371 0.106649c18.663521 44.664472 26.87547 98.543391 23.825318 155.984376-1.066487 19.687349 13.86433 36.516512 33.359711 37.582999 19.324743 1.386433 36.132577-14.013638 37.177734-33.722316 3.668715-68.596439-6.612219-133.844108-29.690996-188.640206z m-555.362398 126.485349c-19.516711 0-35.322047 15.975974-35.322047 35.705982v34.831463c0 19.730008 15.805336 35.727312 35.322047 35.727312 19.516711 0 35.322047-15.997304 35.322047-35.727312v-34.831463c0-19.730008-15.805336-35.705982-35.322047-35.705982z m275.708198 0c-19.516711 0-35.322047 15.975974-35.322047 35.705982v34.831463c0 19.730008 15.805336 35.727312 35.322047 35.727312 19.516711 0 35.322047-15.997304 35.322047-35.727312v-34.831463c0-19.730008-15.805336-35.705982-35.322047-35.705982z m-50.743447 161.722077a35.279387 35.279387 0 0 0-48.802442 10.024977c-0.149308 0.213297-15.400071 22.588193-38.649486 22.588192-22.609523 0-36.68715-20.711176-37.625658-22.161598a35.08742 35.08742 0 0 0-48.439836-11.155453 35.919279 35.919279 0 0 0-11.368751 49.186377c12.691194 20.625857 47.458668 55.563968 97.434245 55.563968 49.69829 0 84.935018-34.682155 97.903499-55.158703a35.769971 35.769971 0 0 0-10.451571-48.88776z m300.429365 323.294844a35.08742 35.08742 0 0 0-49.399674-7.508068L614.552007 959.419311a35.983269 35.983269 0 0 0-7.422749 49.954247 35.172739 35.172739 0 0 0 49.421004 7.486739l235.480312-175.906353c15.698687-11.731356 19.004797-34.084922 7.422749-49.954247z m-490.157388 168.419614L173.772963 783.44897a35.08742 35.08742 0 0 0-49.421003 7.508067 35.983269 35.983269 0 0 0 7.422749 49.954248l235.480311 175.906352a35.172739 35.172739 0 0 0 49.399674-7.508068 35.983269 35.983269 0 0 0-7.401419-49.932917z" fill="#111111" p-id="1892" data-spm-anchor-id="a313x.collections_detail.0.i2.361a3a81f5lUb4" class=""></path></svg>`;
// const d = `<svg t="1725376930087" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1891" data-spm-anchor-id="a313x.collections_detail.0.i4.361a3a81f5lUb4" width="200" height="200"><path d="M913.317653 450.150478a35.215398 35.215398 0 0 0-44.06724 23.803988 459.058629 459.058629 0 0 1-44.707131 102.596041c-65.268999 109.890812-179.212462 172.920189-312.629976 172.920189-133.460173 0-247.424965-63.050707-312.693965-172.984178a460.125116 460.125116 0 0 1-44.643142-102.468063 35.279387 35.279387 0 0 0-44.06724-23.825318 35.791301 35.791301 0 0 0-23.548031 44.557824 531.899686 531.899686 0 0 0 51.703286 118.486696c71.305315 120.150416 195.892317 195.423063 337.927045 206.173251v168.718231c0 19.730008 15.784006 35.705982 35.322047 35.705982 19.516711 0 35.322047-15.997304 35.322047-35.705982v-168.718231c141.970739-10.750188 266.536411-86.001505 337.863056-206.109262a531.259794 531.259794 0 0 0 51.767275-118.593345 35.791301 35.791301 0 0 0-23.548031-44.557823z" fill="#111111" p-id="1892" data-spm-anchor-id="a313x.collections_detail.0.i2.361a3a81f5lUb4" class=""></path></svg>`
const d=`M913.317653 450.150478
a35.215398 35.215398 0 0 0-44.06724 23.803988 459.058629 459.058629 0 0 1-44.707131 102.596041
c-65.268999 109.890812-179.212462 172.920189-312.629976 172.920189-133.460173 0-247.424965-63.050707-312.693965-172.984178
a460.125116 460.125116 0 0 1-44.643142-102.468063 35.279387 35.279387 0 0 0-44.06724-23.825318 35.791301 35.791301 0 0 0-23.548031 44.557824 531.899686 531.899686 0 0 0 51.703286 118.486696
c71.305315 120.150416 195.892317 195.423063 337.927045 206.173251
v168.718231
c0 19.730008 15.784006 35.705982 35.322047 35.705982 19.516711 0 35.322047-15.997304 35.322047-35.705982
v-168.718231
c141.970739-10.750188 266.536411-86.001505 337.863056-206.109262
a531.259794 531.259794 0 0 0 51.767275-118.593345 35.791301 35.791301 0 0 0-23.548031-44.557823z`

